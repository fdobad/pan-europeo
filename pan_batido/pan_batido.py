# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Marraqueta
                                 A QGIS plugin
 Ponders different rasters with different utility functions
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-05-14
        git sha              : $Format:%H$
        copyright            : (C) 2024 by fdobad@github
        email                : fbadilla@ing.uchile.cl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
import tempfile

import numpy as np
from fire2a.raster import read_raster
from osgeo import gdal
from qgis.core import QgsMessageLog
from qgis.PyQt.QtCore import QCoreApplication, QSettings, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Import the code for the dialog
from .pan_batido_dialog import MarraquetaDialog
# Initialize Qt resources from file resources.py
from .resources.resources import *


class Marraqueta:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(self.plugin_dir, "i18n", "Marraqueta_{}.qm".format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&Pan Europeo")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("Marraqueta", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ":/plugins/pan_batido/resources/marraqueta.svg"
        self.add_action(
            icon_path, text=self.tr("Load rasters before launching!"), callback=self.run, parent=self.iface.mainWindow()
        )

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr("&Pan Europeo"), action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""
        QgsMessageLog.logMessage(f"current layers {self.iface.mapCanvas().layers()}", "Marraqueta")

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = MarraquetaDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        QgsMessageLog.logMessage(f"{result=} {self.dlg.DialogCode()=}", "Marraqueta")
        # See if OK was pressed
        if result:
            QgsMessageLog.logMessage("OK clicked", "Marraqueta")

            self.dlg.rescale_weights()

            data = []
            # get all values of each row
            for i, row in enumerate(self.dlg.rows):
                layer, checkbox, spinbox, slider = row
                QgsMessageLog.logMessage(
                    f"{i=}, {layer.name()=}, {checkbox.isChecked()=}, {spinbox.value()=}, slider {slider.value()=}",
                    "Marraqueta",
                )
                adict = {"name": layer.name()}
                adict["data"], adict["info"] = read_raster(layer.publicSource())
                if checkbox:
                    weight = spinbox.value()
                else:
                    weight = 0
                adict["weight"] = weight
                data += [adict]

            # for every data, normalize then dot product by weight and sum
            H, W = data[0]["data"].shape
            GT = data[0]["info"]["Transform"]
            final_data = np.zeros((H, W), dtype=np.float32)

            for adict in data:
                # min_max_scale
                dat = adict["data"]
                nodata = adict["info"]["NoDataValue"]
                min_val = dat[dat != nodata].min()
                max_val = dat[dat != nodata].max()
                if max_val != min_val:
                    min_max_scaled = (adict["data"] - min_val) / (max_val - min_val)
                else:
                    min_max_scaled = np.zeros_like(dat)
                min_max_scaled = np.float32(min_max_scaled)
                QgsMessageLog.logMessage(f"{np.histogram(min_max_scaled)=}", "Marraqueta")
                final_data[dat != nodata] += adict["weight"] / 100 * min_max_scaled[dat != nodata]

            # create a new layer with final data
            afile = tempfile.mktemp(suffix=".tif")
            ds = gdal.GetDriverByName("GTiff").Create(afile, W, H, 1, gdal.GDT_Float32)
            ds.SetGeoTransform(GT)  # specify coords
            ds.SetProjection(layer.crs().authid())  # export coords to file
            band = ds.GetRasterBand(1)
            if 0 != band.SetNoDataValue(-9999):
                feedback.pushWarning("Set No Data failed for mean band")
            if 0 != band.WriteArray(final_data):
                QgsMessageLog.logMessage("WriteArray failed for mean band", "Marraqueta")
            ds.FlushCache()  # write to disk
            ds = None

            # add the raster layer to the canvas
            self.iface.addRasterLayer(afile, "final_data")
