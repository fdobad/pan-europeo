# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MarraquetaDialog
                                 A QGIS plugin
 Ponders different rasters with different utility functions
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-05-14
        git sha              : $Format:%H$
        copyright            : (C) 2024 by fdobad@github
        email                : fbadilla@ing.uchile.cl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


from qgis.core import QgsMessageLog
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import Qt
from qgis.utils import iface


class MarraquetaDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        """Constructor."""
        super(MarraquetaDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        # verticalLayour
        QgsMessageLog.logMessage("MarraquetaDialog.__init__", "Marraqueta")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.setLayout(self.verticalLayout)
        self.rows = []

        for layer in iface.mapCanvas().layers():
            horizontalLayout = QtWidgets.QHBoxLayout()
            horizontalLayout.addWidget(QtWidgets.QLabel(layer.name()))
            checkbox = QtWidgets.QCheckBox()
            spinbox = QtWidgets.QSpinBox()
            slider = QtWidgets.QSlider(Qt.Orientation.Horizontal)
            link_spinbox_slider_checkbox(spinbox, slider, checkbox)
            horizontalLayout.addWidget(checkbox)
            horizontalLayout.addWidget(spinbox)
            horizontalLayout.addWidget(slider)
            self.verticalLayout.addLayout(horizontalLayout)
            self.rows.append([layer, checkbox, spinbox, slider])

        # add a QtButtonBox to the bottom of the dialog with Ok, and Cancel
        self.buttonBox = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.Ok | QtWidgets.QDialogButtonBox.Close | QtWidgets.QDialogButtonBox.Reset,
        )
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)
        for button in self.buttonBox.buttons():
            if button.text() == "Reset":
                button.clicked.connect(self.reset)

        self.verticalLayout.addWidget(self.buttonBox)
        # self.setupUi(self)

    def reject(self):
        self.destroy()

    def reset(self):
        self.destroy()
        self = self.__init__()


def link_spinbox_slider_checkbox(spinbox, slider, checkbox):
    """Link a QSpinBox, QSlider and QCheckBox together."""
    # set minimum and maximum values to 0 and 100
    spinbox.setRange(0, 100)
    slider.setRange(0, 100)

    def set_slider_value():
        slider.setValue(spinbox.value())

    def set_spinbox_value(value):
        spinbox.setValue(value)

    spinbox.valueChanged.connect(set_slider_value)
    slider.valueChanged.connect(set_spinbox_value)

    def set_enabled(value):
        spinbox.setEnabled(value)
        slider.setEnabled(value)

    checkbox.stateChanged.connect(set_enabled)
    checkbox.setChecked(True)
